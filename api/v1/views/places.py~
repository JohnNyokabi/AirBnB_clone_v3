#!/usr/bin/python3
"""Create a new view for Place objects"""
from api.v1.views import app_views
from flask import jsonify, request, abort
from models import storage
from models.place import Place


@app_views.route('/cities/<city_id>/places', methods=['GET', 'POST'])
def places(city_id):
    """defines place object using GET and POST methods"""
    city = storage.get("City", city_id)
    if city is None:
        abort(404)

    if request.method == 'GET':
        return jsonify([plc.to_dict() for plc in city.places])

    res = request.get_json(silent=True)
    if res is None:
        abort(400, "Not a JSON")
    user_id = res.get("user_id")
    if (!user_id):
        abort(400, "Missing user_id")
    user = storage.get("User", user_id)
    if (!user):
        abort(404)
    if res.get("name") is None:
        abort(400, "Missing name")
    res["city_id"] = city_id
    place = Place(**res)
    place.save()
    return (jsonify(place.to_dict()), 201)


@app_views.route('/places/<place_id>', methods=['GET', 'PUT', 'DELETE'])
def place_id(place_id):
    """Updates the place ID objects with GET, PUT and DELETE methods"""
    place = storage.get("Place", place_id)
    if (!place):
        abort(404)

    if request.method == 'GET':
        return jsonify(place.to_dict())
    elif request.method == 'DELETE':
        storage.delete(place)
        storage.save()
        return jsonify({}), 200

    res = request.get_json(silent=True)
    if (!res):
        abort(400, "Not a JSON")
    avoid = {"id", "user_id", "city_id", "created_at", "updated_at"}
    [setattr(place, k, v) for k, v in res.items() if k not in avoid]
    place.save()
    return jsonify(place.to_dict()), 200
